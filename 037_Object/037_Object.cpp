#include <iostream>

// 자료형을 개념이라고 봅니다.
// 자료형 == 개념

// 이걸론 게임을 만들수 없다.
// 나는 몬스터를 만들고 싶어.
// 몬스터의 개념을 먼저 만들어야 한다.
// 그런데 구현 생각하지 말라고 했습니다.
// 어떤식으로 풀어나가려고 하는지 내가 알아야 하니까.

// 나는 몬스터를 만들고 싶다.
// 그 개념을 문법화 시켰다.
// 이걸 사용자 정의 자료형이라고 합니다.
//      user definition type
// 자료형;

// class = 개념을 만들겠다.
// 플레이어는 이런 녀석이다.
// 플레이어의 개념을 만들었다.
// xxxxxx 플레이어를 만들었다.
class Player
{
// 클래스 내부

// 상태
    char Name[100];
    int Hp;
    int Att;
    int Speed;

// 행동
// 구체화를 해야 한다.
    void Damage(int _Att);
    void StatusRender();
};

// 내가 만든 나의 자료형
// 나 => 유저 c++을 사용하는 유저
// 사용자 정의 자료형
// user definition type 
class Monster
{

};

int main()
{
    int; // 정수라고 부르는 개념일 뿐이니까 
         // 정수라는 개념만으로는 우리는 아무것도 할수 없다.
         // 정수를 사용하고 정수로 계산을 하려면
        // 객체화라는것을 해야 한다.
        // 이제부터 int도 클래스인데.
        // C++만든사람들이 먼저 만들어준 개념이라고 생각하면 
        // C++만든사람들이 만들었다고 해서 기본 자료형이라고 부릅니다.
    int A;
        // 이게 객체화
        // A는 int라는 개념이 메모리화된 객체이다.

    // 똑같은 객체화
    // 만들기만 해도 초기화하는 방법이 한가지 있습니다.
    // 지금은 문법을 보여주기만 하고 나중에 이 문법에 대해서
    // 정말정말 중요하기 때문에 정말정말 자세히 설명할것이고
    Player NewPlayer = Player();

    // NewPlayer; <= 객체

    int NewInt = int();

    // OOP다.


    std::cout << "Hello World!\n";
}
